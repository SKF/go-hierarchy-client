// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/SKF/go-utility/v2/uuid"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Component component
//
// swagger:model Component
type Component struct {

	// attached to
	AttachedTo uuid.UUID `json:"attachedTo,omitempty"`

	// designation
	Designation string `json:"designation,omitempty"`

	// fixed speed
	FixedSpeed float64 `json:"fixedSpeed,omitempty"`

	// id
	ID uuid.UUID `json:"id,omitempty"`

	// manufacturer
	Manufacturer string `json:"manufacturer,omitempty"`

	// position
	Position int64 `json:"position,omitempty"`

	// position description
	PositionDescription string `json:"positionDescription,omitempty"`

	// rotating ring
	// Enum: [inner outer both]
	RotatingRing string `json:"rotatingRing,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// shaft side
	// Enum: [de nde unknown]
	ShaftSide string `json:"shaftSide,omitempty"`

	// type
	// Enum: [shaft bearing]
	Type string `json:"type,omitempty"`
}

// Validate validates this component
func (m *Component) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRotatingRing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShaftSide(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var componentTypeRotatingRingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inner","outer","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		componentTypeRotatingRingPropEnum = append(componentTypeRotatingRingPropEnum, v)
	}
}

const (

	// ComponentRotatingRingInner captures enum value "inner"
	ComponentRotatingRingInner string = "inner"

	// ComponentRotatingRingOuter captures enum value "outer"
	ComponentRotatingRingOuter string = "outer"

	// ComponentRotatingRingBoth captures enum value "both"
	ComponentRotatingRingBoth string = "both"
)

// prop value enum
func (m *Component) validateRotatingRingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, componentTypeRotatingRingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Component) validateRotatingRing(formats strfmt.Registry) error {

	if swag.IsZero(m.RotatingRing) { // not required
		return nil
	}

	// value enum
	if err := m.validateRotatingRingEnum("rotatingRing", "body", m.RotatingRing); err != nil {
		return err
	}

	return nil
}

var componentTypeShaftSidePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["de","nde","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		componentTypeShaftSidePropEnum = append(componentTypeShaftSidePropEnum, v)
	}
}

const (

	// ComponentShaftSideDe captures enum value "de"
	ComponentShaftSideDe string = "de"

	// ComponentShaftSideNde captures enum value "nde"
	ComponentShaftSideNde string = "nde"

	// ComponentShaftSideUnknown captures enum value "unknown"
	ComponentShaftSideUnknown string = "unknown"
)

// prop value enum
func (m *Component) validateShaftSideEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, componentTypeShaftSidePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Component) validateShaftSide(formats strfmt.Registry) error {

	if swag.IsZero(m.ShaftSide) { // not required
		return nil
	}

	// value enum
	if err := m.validateShaftSideEnum("shaftSide", "body", m.ShaftSide); err != nil {
		return err
	}

	return nil
}

var componentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["shaft","bearing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		componentTypeTypePropEnum = append(componentTypeTypePropEnum, v)
	}
}

const (

	// ComponentTypeShaft captures enum value "shaft"
	ComponentTypeShaft string = "shaft"

	// ComponentTypeBearing captures enum value "bearing"
	ComponentTypeBearing string = "bearing"
)

// prop value enum
func (m *Component) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, componentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Component) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Component) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Component) UnmarshalBinary(b []byte) error {
	var res Component
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
